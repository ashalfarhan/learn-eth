/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getPlayers",
    outputs: [
      {
        internalType: "address payable[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "join",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "manager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pickWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109a28061005c5f395ff3fe608060405260043610610049575f3560e01c80634529cae71461004d578063481c6a75146100775780635d495aea146100a15780638b5b9ccc146100b7578063b688a363146100e1575b5f80fd5b348015610058575f80fd5b506100616100eb565b60405161006e91906104c8565b60405180910390f35b348015610082575f80fd5b5061008b6100f7565b6040516100989190610520565b60405180910390f35b3480156100ac575f80fd5b506100b561011a565b005b3480156100c2575f80fd5b506100cb6102a3565b6040516100d89190610601565b60405180910390f35b6100e961032e565b005b5f600180549050905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019e906106a1565b60405180910390fd5b5f6001805490506101b66103da565b6101c091906106ec565b9050600181815481106101d6576101d561071c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f19350505050158015610240573d5f803e3d5ffd5b505f67ffffffffffffffff81111561025b5761025a610749565b5b6040519080825280602002602001820160405280156102895781602001602082028036833780820191505090505b506001908051906020019061029f92919061040e565b5050565b6060600180548060200260200160405190810160405280929190818152602001828054801561032457602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102db575b5050505050905090565b662386f26fc10000341015610378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036f906107e6565b60405180910390fd5b600133908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f444260016040516020016103f193929190610934565b604051602081830303815290604052805190602001205f1c905090565b828054828255905f5260205f20908101928215610484579160200282015b82811115610483578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061042c565b5b5090506104919190610495565b5090565b5b808211156104ac575f815f905550600101610496565b5090565b5f819050919050565b6104c2816104b0565b82525050565b5f6020820190506104db5f8301846104b9565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61050a826104e1565b9050919050565b61051a81610500565b82525050565b5f6020820190506105335f830184610511565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61056c826104e1565b9050919050565b61057c81610562565b82525050565b5f61058d8383610573565b60208301905092915050565b5f602082019050919050565b5f6105af82610539565b6105b98185610543565b93506105c483610553565b805f5b838110156105f45781516105db8882610582565b97506105e683610599565b9250506001810190506105c7565b5085935050505092915050565b5f6020820190508181035f83015261061981846105a5565b905092915050565b5f82825260208201905092915050565b7f4f6e6c79206d616e616765722063616e2063616c6c20746869732066756e63745f8201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b5f61068b602383610621565b915061069682610631565b604082019050919050565b5f6020820190508181035f8301526106b88161067f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6106f6826104b0565b9150610701836104b0565b925082610711576107106106bf565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4a6f696e206d75737420626520636f7374206174206c6561737420302e3031205f8201527f4554480000000000000000000000000000000000000000000000000000000000602082015250565b5f6107d0602383610621565b91506107db82610776565b604082019050919050565b5f6020820190508181035f8301526107fd816107c4565b9050919050565b5f819050919050565b61081e610819826104b0565b610804565b82525050565b5f81549050919050565b5f81905092915050565b5f819050815f5260205f209050919050565b61085381610562565b82525050565b5f610864838361084a565b60208301905092915050565b5f815f1c9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108ac6108a783610870565b61087b565b9050919050565b5f6108be825461089a565b9050919050565b5f600182019050919050565b5f6108db82610824565b6108e5818561082e565b93506108f083610838565b805f5b8381101561092757610904826108b3565b61090e8882610859565b9750610919836108c5565b9250506001810190506108f3565b5085935050505092915050565b5f61093f828661080d565b60208201915061094f828561080d565b60208201915061095f82846108d1565b915081905094935050505056fea26469706673582212206cf716b828e0837e5a376a8183c2b0bdf0b958176cdda4886ba9d2b2e5477e7664736f6c63430008180033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Lottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Lottery__factory {
    return super.connect(runner) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new Interface(_abi) as LotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lottery {
    return new Contract(address, _abi, runner) as unknown as Lottery;
  }
}
